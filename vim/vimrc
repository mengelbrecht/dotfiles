" ------------------------------------------------------------------------------
" vimrc
"
" Inspired by
"     https://github.com/Soliah/dotfiles/blob/master/vimrc
"     https://github.com/wincent/wincent/tree/master/roles/dotfiles/files/.vim
"     https://github.com/junegunn/dotfiles/blob/master/vimrc
"     https://github.com/mhinz/dotfiles/blob/master/vim/vimrc
"     https://github.com/cHoco/dotFiles/blob/master/vimrc
" ------------------------------------------------------------------------------

" ------------------------------------------------------------------------------
" Plugins
" ------------------------------------------------------------------------------
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin()
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/lightline.vim'
Plug 'bling/vim-bufferline'
Plug 'mhinz/vim-sayonara', {'on': ['Sayonara', 'Sayonara']}
Plug 'coderifous/textobj-word-column.vim'
Plug 'joshdick/onedark.vim'
Plug 'junegunn/vim-pseudocl' | Plug 'junegunn/vim-oblique'
Plug 'junegunn/vim-easy-align', {'on': ['<Plug>(LiveEasyAlign)', 'LiveEasyAlign']}
Plug 'justinmk/vim-sneak'
Plug 'myint/indent-finder'
Plug 'ntpeters/vim-better-whitespace'
Plug 'osyo-manga/vim-over', {'on': 'OverCommandLine'}
Plug 'rakr/vim-one', {'on': []}
Plug 'rhysd/vim-clang-format', {'on': 'ClangFormat'}
Plug 'scrooloose/nerdtree', {'on': ['NERDTreeToggle', 'NERDTreeFind']}
Plug 'scrooloose/syntastic', {'on': 'SyntasticCheck'}
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch' | Plug 'wincent/ferret', {'on': ['<Plug>(FerretAck)', '<Plug>(FerretAckWord)', 'Ack']}
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession', {'on': 'Obsession'}
Plug 'tpope/vim-surround'
Plug 'junegunn/fzf', Cond(has('nvim'), {'do': './install --bin' }) | Plug 'junegunn/fzf.vim', Cond(has('nvim'))
Plug 'JazzCore/ctrlp-cmatcher', Cond(!has('nvim'), {'do': 'CFLAGS=-Qunused-arguments CPPFLAGS=-Qunused-arguments ./install.sh'})
Plug 'ctrlpvim/ctrlp.vim', Cond(!has('nvim'))

" " Languages
Plug 'b4winckler/vim-objc', {'for': 'objc'}
Plug 'keith/swift.vim', {'for': 'swift'}
Plug 'mitsuhiko/vim-python-combined', {'for': 'python'}
Plug 'nickhutchinson/vim-cmake-syntax', {'for': 'cmake'}
Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}
Plug 'tbastos/vim-lua', {'for': 'lua'}
Plug 'tpope/vim-git'
Plug 'vim-ruby/vim-ruby', {'for': 'ruby'}
call plug#end()

" ------------------------------------------------------------------------------
" General Settings
" ------------------------------------------------------------------------------
let mapleader                 = "\<SPACE>"
let g:netrw_dirhistmax        = 0 " Disable .netrwhist file creation
" Disable loading of plugins bundled with vim
let g:loaded_2html_plugin     = 1
let g:loaded_getscriptPlugin  = 1
let g:loaded_gzip             = 1
let g:loaded_logipat          = 1
let g:loaded_netrwPlugin      = 1
let g:loaded_rrhelper         = 1
let g:loaded_spellfile_plugin = 1
let g:loaded_tarPlugin        = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_zipPlugin        = 1

set shell=$SHELL               " Use zsh as shell
set viminfo=/100,:100,'100     " Save command history and search patterns
set autoread                   " Automatically load changes
set undolevels=1000            " Large undo levels
set history=100                " Size of command history
set encoding=utf8              " Always use unicode
set backspace=indent,eol,start " Fix backspace
set nobackup                   " Disable backups
set clipboard=unnamed          " Use the OS clipboard by default
set ttyfast                    " Optimize for fast terminal connections
set ttimeout                   " Timeout on keycodes
set ttimeoutlen=10             " Small timeout to reduce lag when pressing ESC in terminal
set nomodeline                 " Hide modeline
set wildchar=<Tab>             " Complete with Tab
set wildmenu                   " Show list
set wildmode=longest:full,full " Show all matches
set whichwrap+=<,>,h,l,[,]     " Move lines using arrows.
set virtualedit=onemore        " Allow for cursor beyond last character
set switchbuf=usetab           " Switch to the window of the buffer
set incsearch                  " Show partial matches as search is entered.
set hlsearch                   " Highlight search patterns.
set ignorecase                 " Enable case insensitive search.
set smartcase                  " Disable case insensitivity if mixed case.
set wrapscan                   " Wrap to top of buffer when searching.
set gdefault                   " Make search and replace global by default.
set autoindent                 " Keep indentation
set tabstop=4                  " Set tab to equal 4 spaces
set softtabstop=4              " Set soft tabs equal to 4 spaces
set shiftwidth=4               " Set auto indent spacing
set shiftround                 " Shift to the next round tab stop
set expandtab                  " Expand tabs into spaces
set smarttab                   " Insert spaces in front of lines
set list                       " Show whitespace
set listchars=tab:╶─           " Tab symbol
set listchars+=trail:·         " Trailing whitespace
set listchars+=extends:#       " Character to show when wrap is off
set listchars+=nbsp:%          " Non breakable whitespace
set cf                         " Enable error jumping.
set gcr=a:blinkon0             " Non blinking cursor
set hidden                     " Allow hidden buffers
set matchpairs+=<:>            " Pairs to match
set nowrap                     " Wrap text
set cursorline                 " Highlight current line
set number                     " Enable line numbers
set ruler                      " Show the cursor position
set shortmess=aIoO             " Show short messages, no intro
set splitbelow                 " Open new splits below
set splitright                 " Open new splits on the right
set showtabline=2              " Always show the tabline
set showcmd                    " Show last command
set noshowmode                 " No need to show mode
set showmatch                  " Show matching parenthesis
set synmaxcol=240              " Limit syntax highlighting to 240 colums
set laststatus=2               " Always show status line
set scrolloff=3                " Always show one line above and below cursor
set sidescrolloff=5            " Always show 5 columns before and after cursor
set completeopt-=preview       " Disable preview window for YCM
set noerrorbells               " Disable error bells
set vb t_vb=                   " Disable visual bell
set linespace=1                " Use 1 pixel space between lines
set t_Co=256                   " Terminal supports 256 colors
set t_md=                      " Disable bold fonts in terminal
set background=dark            " Use dark colorscheme

if has('termguicolors')
  set termguicolors                   " Enable 24bit colors in terminal
endif

if has('nvim')
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
end

if has('gui_running')
  set guioptions-=m " Disable menu bar
  set guioptions-=T " Disable the toolbar
  set guioptions-=a " Do not auto copy selection to clipboard
  set guioptions-=e " Do not use gui tab apperance
  set guioptions-=r " Do not show scrollbars
  set guioptions-=l " Do not show scrollbars
  set guioptions-=R " Do not show scrollbars
  set guioptions-=L " Do not show scrollbars

  if has('gui_macvim')
    set guifont=PragmataPro\ Mono:h14 " Set font
    set macligatures                  " Enable ligatures
    if &background ==# 'dark'
      set macthinstrokes              " Use thin strokes in dark colorscheme
    end
  endif
endif

" ------------------------------------------------------------------------------
" Keymappings
" ------------------------------------------------------------------------------
" Correct common shift key misspellings
cmap W w
cmap WQ wq
cmap wQ wq
cmap Q q

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Visual shifting (without exiting visual mode)
vnoremap < <gv
vnoremap > >gv

" Toggle wrapping
map <F2> :set wrap!<CR>

" Invert result highlighting
nnoremap <silent> _ :set invhlsearch<CR>

" Find merge conflict markers
nnoremap <Leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" Easier window switching
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Close quickfix and location list
nnoremap <Leader>c :cclose<Bar>lclose<CR>

nnoremap <silent> <C-t> :enew<CR>
nnoremap <silent> <C-x> :Sayonara!<CR>
nnoremap <silent> <C-u> :bprev<CR>
nnoremap <silent> <C-i> :bnext<CR>

nnoremap <silent> <Leader>t :tabnew<CR>
nnoremap <silent> <Leader>x :Sayonara<CR>
nnoremap <silent> <Leader>u :tabprevious<CR>
nnoremap <silent> <Leader>i :tabnext<CR>
noremap <silent> <D-1>      :tabn 1<CR>
noremap <silent> <D-2>      :tabn 2<CR>
noremap <silent> <D-3>      :tabn 3<CR>
noremap <silent> <D-4>      :tabn 4<CR>
noremap <silent> <D-5>      :tabn 5<CR>
noremap <silent> <D-6>      :tabn 6<CR>
noremap <silent> <D-7>      :tabn 7<CR>
noremap <silent> <D-8>      :tabn 8<CR>
noremap <silent> <D-9>      :tabn 9<CR>

" Replace and delete to black hole register unless they are prefixed with y
nnoremap yc c
vnoremap yc c
nnoremap yC C
vnoremap yC C
nnoremap yd d
vnoremap yd d
nnoremap yD D
vnoremap yD D
nnoremap ys s
vnoremap ys s
nnoremap yS S
vnoremap yS S
nnoremap yx x
vnoremap yx x
nnoremap yX X
vnoremap yX X
vnoremap p "_dP
nnoremap c "_c
vnoremap c "_c
nnoremap C "_C
vnoremap C "_C
nnoremap d "_d
vnoremap d "_d
nnoremap D "_D
vnoremap D "_D
nnoremap x "_x
vnoremap x "_x
nnoremap X "_X
vnoremap X "_X

if has('nvim')
  tnoremap <ESC>     <C-\><C-n>
  tnoremap <C-h>     <C-\><C-n><C-w>h
  tnoremap <C-j>     <C-\><C-n><C-w>j
  tnoremap <C-k>     <C-\><C-n><C-w>k
  tnoremap <C-l>     <C-\><C-n><C-w>l
  tnoremap <C-x>     <C-\><C-n>:Sayonara!<CR>
  tnoremap <Leader>x <C-\><C-n>:Sayonara<CR>
  nnoremap <Leader>z :below 20sp term://$SHELL<CR>i
endif

" ------------------------------------------------------------------------------
" Autocommands
" ------------------------------------------------------------------------------
augroup AutocommandSettings
  " Restore cursor position
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  autocmd InsertEnter * set listchars-=trail:·
  autocmd InsertLeave * set listchars+=trail:·
  " Detect gyp files
  autocmd BufRead,BufNewFile *.gyp,*.gypi setlocal filetype=python

  if exists('+colorcolumn')
    autocmd FileType *           setlocal colorcolumn=
    autocmd FileType sh,zsh      setlocal colorcolumn=80
    autocmd FileType cpp         setlocal colorcolumn=100
    autocmd FileType python,ruby setlocal colorcolumn=120
    autocmd FileType gitcommit   setlocal colorcolumn=50,72
  endif
augroup END

" ------------------------------------------------------------------------------
" Colorscheme
" ------------------------------------------------------------------------------
let g:one_allow_italics        = 1
let g:onedark_terminal_italics = 1

if !has('gui_running')
  let g:one_termcolors     = 16
  let g:onedark_termcolors = 16
endif

colorscheme onedark

if g:colors_name     ==# "onedark"
  let s:ws_guifg       = synIDattr(synIDtrans(hlID("Cursor")), "fg", "gui")
  let s:ws_ctermfg     = synIDattr(synIDtrans(hlID("Cursor")), "fg", "cterm")
  let s:ws_guibg       = synIDattr(synIDtrans(hlID("SpellBad")), "fg", "gui")
  let s:ws_ctermbg     = synIDattr(synIDtrans(hlID("SpellBad")), "fg", "cterm")
elseif g:colors_name ==# "one"
  let s:ws_guifg       = synIDattr(synIDtrans(hlID("ErrorMsg")), "bg", "gui")
  let s:ws_ctermfg     = synIDattr(synIDtrans(hlID("ErrorMsg")), "bg", "cterm")
  let s:ws_guibg       = synIDattr(synIDtrans(hlID("ErrorMsg")), "fg", "gui")
  let s:ws_ctermbg     = synIDattr(synIDtrans(hlID("ErrorMsg")), "fg", "cterm")
end

" ------------------------------------------------------------------------------
" Vim Better Whitespace
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'vim-better-whitespace')
  exe "hi ExtraWhitespace gui=none cterm=none guifg=" . s:ws_guifg . " guibg=" . s:ws_guibg .
    \ " ctermfg=" . s:ws_ctermfg . " ctermbg=" . s:ws_ctermbg

  " Use F5 to remove all trailing spaces
  nnoremap <silent> <F5> :StripWhitespace<CR>
end

" ------------------------------------------------------------------------------
" Bufferline
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'vim-bufferline')
  let g:bufferline_echo                = 0
  let g:bufferline_active_buffer_left  = ''
  let g:bufferline_active_buffer_right = ''
  let g:bufferline_show_bufnr          = 0
  let g:bufferline_fname_mod           = ':~:.:s?^$?[No Name]?'
  let g:bufferline_pathshorten         = 1
end

" ------------------------------------------------------------------------------
" Lightline
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'lightline.vim')
  let g:lightline                    = {}
  let g:lightline.colorscheme        = 'onedark'
  let g:lightline.separator          = {'left': "\uE0B0", 'right': "\uE0B2"}
  let g:lightline.subseparator       = {'left': "\uE0B1", 'right': "\uE0B3"}
  let g:lightline.active             = {
        \ 'left': [['mode', 'paste'], ['fugitive'], ['readonly'], ['filename']],
        \ 'right': [['percent', 'lineinfo'], ['fileformat', 'fileencoding', 'whitespace'], ['filetype']]
        \ }
  let g:lightline.tab                = {'active': ['tabnum'], 'inactive': ['tabnum']}
  let g:lightline.tabline            = {'left': [['tabs'], ['bufferline']], 'right': [['close']]}
  let g:lightline.component_expand   = {'bufferline': 'LightLineBufferline'}
  let g:lightline.component_type     = {'bufferline': 'tabsel'}
  let g:lightline.component_function = {
        \ 'readonly': 'LightLineReadonly',
        \ 'fugitive': 'LightLineFugitive',
        \ 'filename': 'LightLineFilename',
        \ 'fileformat': 'LightLineFileformat',
        \ 'filetype': 'LightLineFiletype',
        \ 'fileencoding': 'LightLineFileencoding',
        \ 'whitespace': 'LightLineWhitespace',
        \ 'mode': 'LightLineMode'
        \ }

  let s:ll_black      = [synIDattr(synIDtrans(hlID("Normal")), "bg", "gui"),     synIDattr(synIDtrans(hlID("Normal")), "bg", "cterm")]
  let s:ll_white      = [synIDattr(synIDtrans(hlID("Normal")), "fg", "gui"),     synIDattr(synIDtrans(hlID("Normal")), "fg", "cterm")]
  let s:ll_red        = [synIDattr(synIDtrans(hlID("DiffDelete")), "fg", "gui"), synIDattr(synIDtrans(hlID("DiffDelete")), "fg", "cterm")]
  let s:ll_green      = [synIDattr(synIDtrans(hlID("DiffAdd")), "fg", "gui"),    synIDattr(synIDtrans(hlID("DiffAdd")), "fg", "cterm")]
  let s:ll_yellow     = [synIDattr(synIDtrans(hlID("Search")), "bg", "gui"),     synIDattr(synIDtrans(hlID("Search")), "bg", "cterm")]
  let s:ll_blue       = [synIDattr(synIDtrans(hlID("DiffText")), "fg", "gui"),   synIDattr(synIDtrans(hlID("DiffText")), "fg", "cterm")]
  let s:ll_magenta    = [synIDattr(synIDtrans(hlID("Todo")), "fg", "gui"),       synIDattr(synIDtrans(hlID("Todo")), "fg", "cterm")]
  let s:ll_dark_grey  = [synIDattr(synIDtrans(hlID("CursorLine")), "bg", "gui"), synIDattr(synIDtrans(hlID("CursorLine")), "bg", "cterm")]
  let s:ll_light_grey = [synIDattr(synIDtrans(hlID("Pmenu")), "bg", "gui"),      synIDattr(synIDtrans(hlID("Pmenu")), "bg", "cterm")]

  let s:lightline_onedark                 = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}
  let s:lightline_onedark.normal.left     = [[s:ll_black, s:ll_green], [s:ll_white, s:ll_light_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.normal.right    = [[s:ll_black, s:ll_green], [s:ll_white, s:ll_light_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.normal.middle   = [[s:ll_green, s:ll_black]]
  let s:lightline_onedark.inactive.left   = [[s:ll_white, s:ll_dark_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.inactive.right  = [[s:ll_white, s:ll_dark_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.inactive.middle = [[s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.insert.left     = [[s:ll_black, s:ll_blue], [s:ll_white, s:ll_light_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.insert.right    = [[s:ll_black, s:ll_blue], [s:ll_white, s:ll_light_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.insert.middle   = [[s:ll_blue, s:ll_black]]
  let s:lightline_onedark.replace.left    = [[s:ll_black, s:ll_red], [s:ll_white, s:ll_light_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.replace.right   = [[s:ll_black, s:ll_red], [s:ll_white, s:ll_light_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.replace.middle  = [[s:ll_red, s:ll_black]]
  let s:lightline_onedark.visual.left     = [[s:ll_black, s:ll_magenta], [s:ll_white, s:ll_light_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.visual.right    = [[s:ll_black, s:ll_magenta], [s:ll_white, s:ll_light_grey], [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.visual.middle   = [[s:ll_magenta, s:ll_black]]
  let s:lightline_onedark.tabline.left    = [[s:ll_white, s:ll_light_grey],  [s:ll_white, s:ll_dark_grey]]
  let s:lightline_onedark.tabline.right   = [[s:ll_black, s:ll_magenta]]
  let s:lightline_onedark.tabline.middle  = [[s:ll_green, s:ll_black]]
  let s:lightline_onedark.tabline.tabsel  = [[s:ll_black, s:ll_green]]
  let s:lightline_onedark.normal.error    = [[s:ll_black, s:ll_red]]
  let s:lightline_onedark.normal.warning  = [[s:ll_black, s:ll_yellow]]

  let g:lightline#colorscheme#onedark#palette = lightline#colorscheme#flatten(s:lightline_onedark)

  function! LightLineReadonly()
    return &readonly ? "\uE0A2" : ''
  endfunction

  function! s:strip(input)
    return substitute(a:input, '^\s*\(.\{-}\)\s*$', '\1', '')
  endfunction

  function! LightLineBufferline()
    call bufferline#refresh_status()
    let buffers = [
          \ g:bufferline_status_info.before,
          \ g:bufferline_status_info.current,
          \ g:bufferline_status_info.after
          \ ]
    call map(buffers, 's:strip(v:val)')
    return buffers
  endfunction

  function! LightLineFugitive()
    if exists("*fugitive#head") && winwidth(0) > 70
      let branch = fugitive#head()
      return branch !=# '' ? "\uE0A0 " . branch : ''
    endif
    return ''
  endfunction

  function! LightLineFilename()
    let fname = expand('%:t')
    return fname == 'ControlP' ? '' :
          \ fname =~ 'NERD_tree' ? '' :
          \ (fname == '' ? '[No Name]' : fname) .
          \ (&modified ? '+' : &modifiable ? '' : '-')
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? (&fileformat == 'unix' ? "\uE0A1" : 'CR') : ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : '--') : ''
  endfunction

  function! LightLineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightLineWhitespace()
    return winwidth(0) > 70 ? &shiftwidth . (&expandtab ? "SP" : "TB") : ''
  endfunction

  function! LightLineMode()
      let fname = expand('%:t')
      let fmode = lightline#mode()
      return fname == 'ControlP' ? 'CtrlP' :
          \ fname =~ 'NERD' ? 'NERD' :
          \ fmode == 'NORMAL'  ? 'N' :
          \ fmode == 'INSERT'  ? 'I' :
          \ fmode == 'VISUAL'  ? 'V' :
          \ fmode == 'V-LINE'  ? 'V' :
          \ fmode == 'V-BLOCK' ? 'V' :
          \ fmode == 'REPLACE' ? 'R' :
          \ fmode == 'TERMINAL' ? 'T' : fmode
  endfunction
end

" ------------------------------------------------------------------------------
" NERDTree
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'nerdtree')
  let g:NERDTreeChDirMode     = 2 " Change cwd when root changes
  let g:NERDTreeMinimalUI     = 1 " Reduce some clutter
  let g:NERDTreeMouseMode     = 2 " Single click opens any node
  let g:NERDTreeShowBookmarks = 1 " Show bookmarks
  let g:NERDTreeShowHidden    = 1 " Show hidden files
  let g:NERDTreeIgnore        = ['\.DS_Store$']

  " Show file tree
  map <unique> <Leader>n :NERDTreeToggle<CR>
  " Reveal file in file tree
  map <unique> <Leader>r :NERDTreeFind<CR>

  augroup NERDTreeSettings
    " Hide whitespace symbols in nerdtree
    autocmd FileType nerdtree setlocal nolist
  augroup END
end

" ------------------------------------------------------------------------------
" Sneak
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'vim-sneak')
  let g:sneak#streak = 1

  hi link SneakPluginTarget IncSearch
  hi link SneakStreakTarget IncSearch
  hi link SneakPluginScope  Comment
  hi link SneakStreakMask   Comment
end

" ------------------------------------------------------------------------------
" Syntastic
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'syntastic')
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_jump                = 1
  let g:syntastic_auto_loc_list            = 1
  let g:syntastic_enable_ballons           = has('ballon_eval')
  let g:syntastic_error_symbol             = '☒'
  let g:syntastic_warning_symbol           = '⚠'
  let g:syntastic_loc_list_height          = 3
  let g:syntastic_check_on_wq              = 0
  let g:syntastic_cpp_compiler_options     = '-std=c++14 -stdlib=libc++'
  let g:syntastic_cpp_checkers             = [] " or ['clang_tidy']
  let g:syntastic_cpp_clang_tidy_post_args = '-p build/compile_commands.json'

  nnoremap <unique> <F4> :SyntasticCheck<CR>
end

" ------------------------------------------------------------------------------
" Ycm
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'YouCompleteMe')
  let g:ycm_autoclose_preview_window_after_completion = 1
  let g:ycm_key_list_select_completion                = ['<TAB>', '<Down>', '<Enter>']
  let g:ycm_global_ycm_extra_conf                     = '~/.vim/ycm_config.py'
  let g:ycm_filetype_whitelist                        = { 'python': 1, 'cpp': 1 }
  " let g:ycm_show_diagnostics_ui = 0 " Enable this line to have clang-tidy checks using syntastic

  nnoremap <unique> jd :YcmCompleter GoToDefinition<CR>
  nnoremap <unique> jj :YcmCompleter GoToDefinitionElseDeclaration<CR>
  nnoremap <unique> jc :YcmCompleter GoToDeclaration<CR>
  nnoremap <unique> jk :YcmCompleter GoToInclude<CR>
  nnoremap <unique> jp :YcmDiags<CR>
  nnoremap <F3>        :YcmForceCompileAndDiagnostics<CR>
end

" ------------------------------------------------------------------------------
" Fugitive
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'vim-fugitive')
  nnoremap <unique> <Space>gs  :Gstatus<CR>
  nnoremap <unique> <Space>gc  :Gcommit -v -q<CR>
  nnoremap <unique> <Space>ga  :Gcommit -v -q --amend<CR>
  nnoremap <unique> <Space>gd  :Gdiff<CR>
  nnoremap <unique> <Space>gl  :silent! Glog<CR>:bot copen<CR>
  nnoremap <unique> <Space>gg  :Ggrep<Space>
  nnoremap <unique> <Space>gm  :Gmove<Space>
  nnoremap <unique> <Space>gp  :Dispatch! git push<CR>
  nnoremap <unique> <Space>gfr :Dispatch! git pull --rebase<CR>
end

" ------------------------------------------------------------------------------
" fzf
" ------------------------------------------------------------------------------
if has('nvim') && has_key(g:plugs, 'fzf.vim')
  if executable('pt')
    let $FZF_DEFAULT_COMMAND = 'pt -l --nocolor --nogroup --hidden --ignore .svn --ignore .git -g ""'
  end
  let $FZF_DEFAULT_OPTS .= ' --inline-info'
  nnoremap <C-p> :FZF<CR>
  nnoremap <C-o> :Buffers<CR>
end

" ------------------------------------------------------------------------------
" CtrP
" ------------------------------------------------------------------------------
if !has('nvim') && has_key(g:plugs, 'ctrlp.vim')
  let g:ctrlp_cmd          = 'CtrlPMixed'
  let g:ctrlp_by_filename  = 1 " Search by filename as default
  let g:ctrlp_use_caching  = 1
  let g:ctrlp_user_command = 'pt -l --nocolor --hidden --ignore .svn --ignore .git -g "" %s'

  if has_key(g:plugs, 'ctrlp-cmatcher')
    let g:ctrlp_match_func = { 'match' : 'matcher#cmatch' }
  end

  nnoremap <C-p> :CtrlPMixed<CR>
  nnoremap <C-o> :CtrlPBuffer<CR>
end

" ------------------------------------------------------------------------------
" Easy-Align
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'vim-easy-align')
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(LiveEasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(LiveEasyAlign)
end

" ------------------------------------------------------------------------------
" Oblique
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'vim-oblique')
  let g:oblique#incsearch_highlight_all = 1

  exe "hi ObliqueCurrentMatch gui=none cterm=none" .
        \ " guifg=" . synIDattr(synIDtrans(hlID("Normal")), "bg", "gui") .
        \ " guibg=" . synIDattr(synIDtrans(hlID("DiffAdd")), "fg", "gui") .
        \ " ctermfg=" . synIDattr(synIDtrans(hlID("Normal")), "bg", "cterm") .
        \ " ctermbg=" .  synIDattr(synIDtrans(hlID("DiffAdd")), "fg", "cterm")
end

" ------------------------------------------------------------------------------
" Ferret
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'ferret')
  if executable('pt')
    set grepprg=pt\ --nocolor\ --nogroup\ --column\ --smart-case\ --hidden\ --ignore\ .svn\ --ignore\ .git
  endif
  let g:FerretHlsearch = 1
  let g:FerretMap      = 0

  nmap <unique> <Leader>vv <Plug>(FerretAckWord)
  nmap <unique> <Leader>ff <Plug>(FerretAck)
end

" ------------------------------------------------------------------------------
" clang-format
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'vim-clang-format')
  let g:clang_format#detect_style_file = 1

  augroup ClangFormatSettings
    autocmd FileType c,cpp,objc,objcpp nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
    autocmd FileType c,cpp,objc,objcpp vnoremap <buffer><Leader>cf :ClangFormat<CR>
  augroup END
end

" ------------------------------------------------------------------------------
" vim.cpp
" ------------------------------------------------------------------------------
if has_key(g:plugs, 'vim-cpp-enhanced-highlight')
  let c_no_curly_error                      = 1 " Do not show curly braces error in cpp files
  let g:cpp_class_scope_highlight           = 1 " Highlight class scope
  let g:cpp_experimental_template_highlight = 1 " Highlight template functions
end

" ------------------------------------------------------------------------------
" Local config
" ------------------------------------------------------------------------------
let s:local_vimrc = fnamemodify(resolve(expand('<sfile>')), ':p:h').'/vimrc.local'
if filereadable(s:local_vimrc)
  execute 'source' s:local_vimrc
endif
